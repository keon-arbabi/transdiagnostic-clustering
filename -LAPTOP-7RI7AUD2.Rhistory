pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
View(tetrad_contrasts)
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(CTs, function(cell_type){
lapply(comparisons, function(comparison){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] <- lapply(tetrad_contrasts[,-c(1:2)], function(x) {
if(is.factor(x)) as.numeric(as.character(x)) else x
})
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(CTs, function(cell_type){
lapply(comparisons, function(comparison){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
View(tetrad_contrasts)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
distinct(gene_ensembl, .keep_all = T) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
View(tetrad_contrasts_long)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(0, 1)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(1, 0)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(1, 0)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1)
plot_df %>% filter(DX == "MDD", cell_type == "PVALB") %>%
ggplot(aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1) +
theme_minimal()
ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1) +
theme_minimal() +
facet_wrap(~cell_tyep + DX, scales = "free")
ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1) +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1) +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(CTs, function(cell_type){
lapply(comparisons, function(comparison){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
distinct(gene_ensembl, .keep_all = T) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
p1 = ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red", wt = 1) +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
p1
View(plot_df)
View(tetrad_contrasts)
View(tetrad_contrasts)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') #%>%
View(tetrad_contrasts_long)
CTs
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
cell_types = c("PyrL2n3","PyrL5n6","PVALB","SST","VIP")
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(cell_types, function(cell_type){
lapply(comparisons, function(comparison){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') #%>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
suppressPackageStartupMessages({
library(tidyverse)
library(data.table)
library(plyr)
library(ggpubr)
library(limma)
library(edgeR)
library(WGCNA)
library(variancePartition)
library(DESeq2)
library(parallel)
library(BiocParallel)
library(readxl)
})
# for parallel processing
ncores = detectCores()
param = SnowParam(ncores, "SOCK", progressbar = TRUE)
library(knitr)
knitr::opts_chunk$set(
echo = FALSE,
warning=FALSE,
message=FALSE,
error = FALSE,
tidy = FALSE,
dev = c('png', 'pdf'),
cache = TRUE)
load("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/seFullData_5p-3bp_3p-15bp.rData")
metadata = seFullData@colData@listData %>% as.data.frame()
# make proper names
metadata$Cell.Type = gsub("-", "", metadata$Cell.Type)
names(metadata)[2:5] = c("HU","CT","DX","ID")
rownames(metadata) = metadata$ID
countMatrix = seFullData@assays$data@listData$counts %>% as.data.frame()
rownames(countMatrix) = seFullData@rowRanges@partitioning@NAMES
# fix sample naming issue
names(countMatrix)[names(countMatrix) %in% c('PV-Hu1195.bam','PV-Hu1222.bam')] = c("PVALB-Hu1195.bam", "PVALB-Hu1222.bam")
countMatrix = countMatrix[, match(rownames(metadata), colnames(countMatrix))]
# check
all(rownames(metadata) == colnames(countMatrix))
# define factors and numeric variables explicitly
contVars = c("Age","PMI","pH","RNA.Ratio","RIN")
catVars = c("HU","Tetrad","CT","MOD","Sex","Race")
metadata[,catVars] = lapply(metadata[,catVars], factor)
metadata[,contVars] = lapply(metadata[,contVars], as.numeric)
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
cell_types = c("PyrL2n3","PyrL5n6","PVALB","SST","VIP")
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(cell_types, function(cell_type){
lapply(comparisons, function(comparison){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') #%>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
p1 = ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red") +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
p1
new_contrast_col_names = lapply(comparisons, function(comparisons){
lapply(cell_types, function(cell_type){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
new_contrast_col_names = lapply(comparisons, function(comparison){
lapply(cell_types, function(cell_type){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
cell_types = c("PyrL2n3","PyrL5n6","PVALB","SST","VIP")
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(comparisons, function(comparison){
lapply(cell_types, function(cell_type){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
arrange(cell_type, DX, padj) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
p1 = ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red") +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
p1
suppressPackageStartupMessages({
library(tidyverse)
library(data.table)
library(plyr)
library(ggpubr)
library(limma)
library(edgeR)
library(WGCNA)
library(variancePartition)
library(DESeq2)
library(parallel)
library(BiocParallel)
library(readxl)
})
BiocManager::install("DESeq2")
suppressPackageStartupMessages({
library(tidyverse)
library(data.table)
library(plyr)
library(ggpubr)
library(limma)
library(edgeR)
library(WGCNA)
library(variancePartition)
library(DESeq2)
library(parallel)
library(BiocParallel)
library(readxl)
})
# for parallel processing
ncores = detectCores()
param = SnowParam(ncores, "SOCK", progressbar = TRUE)
load("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/seFullData_5p-3bp_3p-15bp.rData")
metadata = seFullData@colData@listData %>% as.data.frame()
# make proper names
metadata$Cell.Type = gsub("-", "", metadata$Cell.Type)
names(metadata)[2:5] = c("HU","CT","DX","ID")
rownames(metadata) = metadata$ID
countMatrix = seFullData@assays$data@listData$counts %>% as.data.frame()
rownames(countMatrix) = seFullData@rowRanges@partitioning@NAMES
# fix sample naming issue
names(countMatrix)[names(countMatrix) %in% c('PV-Hu1195.bam','PV-Hu1222.bam')] = c("PVALB-Hu1195.bam", "PVALB-Hu1222.bam")
countMatrix = countMatrix[, match(rownames(metadata), colnames(countMatrix))]
# check
all(rownames(metadata) == colnames(countMatrix))
# define factors and numeric variables explicitly
contVars = c("Age","PMI","pH","RNA.Ratio","RIN")
catVars = c("HU","Tetrad","CT","MOD","Sex","Race")
metadata[,catVars] = lapply(metadata[,catVars], factor)
metadata[,contVars] = lapply(metadata[,contVars], as.numeric)
# load DESeq2 results calculated above
res_df = read.csv(file = "./output/res_df_dwight.csv")[,-1] %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
# load in the tetrad contrasts excel file
tetrad_contrasts = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx")
tetrad_contrasts_headers = read_excel("./input/PITT Tetrad (Control, MDD, BPD, SCZ) SCT-RNAseq/PITT_tetrad_cohort_SCT_contrasts.xlsx", n_max = 2, col_names = F)
cell_types = c("PyrL2n3","PyrL5n6","PVALB","SST","VIP")
comparisons = c('MDD', 'BD', 'SCZ')
gen_col_names = c('log2fc', 'pvalue', 'padj')
new_contrast_col_names = lapply(comparisons, function(comparison){
lapply(cell_types, function(cell_type){
my_str = c(paste(cell_type, comparison, 'log2fc', sep = "_"), paste(cell_type, comparison, 'pvalue', sep = "_"), paste(cell_type, comparison, 'padj', sep = "_"))
return(my_str)
}) %>% unlist()
}) %>% unlist()
tetrad_contrasts = tetrad_contrasts[-c(1,2),]
tetrad_contrasts[,-c(1:2)] = lapply(tetrad_contrasts[,-c(1:2)], function(x){
as.numeric(as.character(x))
})
tetrad_contrasts[tetrad_contrasts == "NA"] = NA
colnames(tetrad_contrasts) = c('gene_ensembl',  'gene_symbol', new_contrast_col_names)
# massage the tetrad contrasts df to put it into standard tidy format
# this is what you need to compare output of DESeq2 / limma with Dwight's DE calls
tetrad_contrasts_long = tetrad_contrasts %>%
dplyr::select(-gene_symbol) %>%
pivot_longer(!gene_ensembl, names_to = 'assay', values_to = 'value') %>%
tidyr::separate(assay, c('cell_type', 'DX', 'assay'), '_') %>%
pivot_wider(id_cols = c(gene_ensembl, cell_type, DX), names_from = assay, values_from = value) %>%
tidyr::unite("match_id", gene_ensembl:cell_type:DX, sep = "_", remove = FALSE)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red") +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
# count up DE genes per cell type and Dx group
plot_df = plot_df %>%
group_by(cell_type, DX) %>%
mutate(de_gene_count = sum(padj < 0.05, na.rm = T)) %>%
distinct(de_gene_count)
ggplot(plot_df, aes(x = cell_type, y = de_gene_count, fill = cell_type)) +
geom_bar(stat = "identity") +
theme_minimal() +
coord_flip() +
facet_wrap(~DX, ncol = 1)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
ggplot(plot_df, aes(log2fc.x, log2fc.y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(slope = 1, intercept = 0, color = "red") +
theme_minimal() +
facet_wrap(~cell_type + DX, scales = "free")
# count up DE genes per cell type and Dx group
plot_df = plot_df %>%
group_by(cell_type, DX) %>%
mutate(de_gene_count = sum(padj < 0.05, na.rm = T)) %>%
distinct(de_gene_count)
ggplot(plot_df, aes(x = cell_type, y = de_gene_count, fill = cell_type)) +
geom_bar(stat = "identity") +
theme_minimal() +
coord_flip() +
facet_wrap(~DX, ncol = 1)
res_lst = readRDS(file = "./output/res_lst_dwight.rds")
View(res_lst)
plot_df = plot_df %>%
group_by(cell_type, DX) %>%
mutate(de_gene_count = sum(padj < 0.01, na.rm = T)) %>%
distinct(de_gene_count)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
# count up DE genes per cell type and Dx group
plot_df = plot_df %>%
group_by(cell_type, DX) %>%
mutate(de_gene_count = sum(padj < 0.01, na.rm = T)) %>%
distinct(de_gene_count)
ggplot(plot_df, aes(x = cell_type, y = de_gene_count, fill = cell_type)) +
geom_bar(stat = "identity") +
theme_minimal() +
coord_flip() +
facet_wrap(~DX, ncol = 1)
plot_df = merge(res_df, tetrad_contrasts_long %>% dplyr::select(c(match_id, log2fc)), by = "match_id")
plot_df = plot_df %>%
group_by(cell_type, DX) %>%
mutate(de_gene_count = sum(padj < 0.1, na.rm = T)) %>%
distinct(de_gene_count)
ggplot(plot_df, aes(x = cell_type, y = de_gene_count, fill = cell_type)) +
geom_bar(stat = "identity") +
theme_minimal() +
coord_flip() +
facet_wrap(~DX, ncol = 1)
# standard filtering, Dwight's filtering criteria are not clear
# minimally important,  more strict filtering to increase power is automatically applied via independent filtering on the mean of normalized counts within the results function
keep = rowSums(edgeR::cpm(countMatrix)>0.1) >= 150
countMatrix_filt = countMatrix[keep,]
# set controls as reference level
metadata$DX = factor(metadata$DX, levels = c("Control","MDD","Bipolar","SCHIZ"), labels = c("CTRL","MDD","BD","SCZ"))
# scale and center age
metadata$Age_std = scale(metadata$Age, center = TRUE)
x = metadata %>% filter(CT == "VIP")
dds = DESeqDataSetFromMatrix(countData = countMatrix_filt[,x$ID], colData = x, design = ~ DX + Age_std + Sex)
dds = DESeq(dds, parallel = TRUE, BPPARAM = param, quiet = TRUE)
contrasts = resultsNames(dds)[-c(1:3)]
contrasts = resultsNames(dds)[c(1:3)]
contrasts
contrasts = resultsNames(dds)[c(2:4)]
contrasts
res_test = results(dds)
res_test = results(dds) %>% as.data.frame()
View(res_test)
res_test = results(dds, contrast = constrasts) %>% as.data.frame()
contrasts = resultsNames(dds)[c(2:4)]
res_test = results(dds, contrast = constrasts) %>% as.data.frame()
res_test = results(dds, contrast = contrasts) %>% as.data.frame()
res_test = results(dds, contrast = contrasts)
contrasts
res_test = results(dds, contrast = contrasts[1])
res_test = results(dds, name = contrasts[1])
head(res_test)
summary(res_test)
